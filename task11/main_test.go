package main

import (
	"testing"
)

// TestSortStrings –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é SortStrings –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–±–æ—Ä–∞—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
func TestSortStrings(t *testing.T) {
	tests := []struct {
		name           string
		input          []string
		expectedOutput string
	}{
		{
			name:           "–ü—É—Å—Ç–æ–π —Å–ª–∞–π—Å",
			input:          []string{},
			expectedOutput: "",
		},
		{
			name:           "–°–ª–∞–π—Å –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–ª–∏–Ω–µ",
			input:          []string{"apple", "dog", "banana", "cat"},
			expectedOutput: "dog, cat, apple, banana",
		},
		{
			name:           "–°–ª–∞–π—Å —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏",
			input:          []string{"apple", "dog", "banana", "dog", "cat", "apple"},
			expectedOutput: "dog, cat, apple, banana",
		},
		{
			name:           "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ",
			input:          []string{"test", "test", "test"},
			expectedOutput: "test",
		},
		{
			name:           "–°–ª–∞–π—Å —Å —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω–æ–π —Å—Ç—Ä–æ–∫",
			input:          []string{"a", "ab", "abc", "abcd"},
			expectedOutput: "a, ab, abc, abcd",
		},
		{
			name:           "–°–ª–∞–π—Å —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏",
			input:          []string{"", "a", "", "ab"},
			expectedOutput: ", a, ab",
		},
		{
			name:           "–°–ª–∞–π—Å —Å unicode —Å–∏–º–≤–æ–ª–∞–º–∏",
			input:          []string{"üòä", "hello", "–ø—Ä–∏–≤–µ—Ç", "world", "üòä"},
			expectedOutput: "üòä, hello, world, –ø—Ä–∏–≤–µ—Ç",
		},
		{
			name:           "–°–ª–∞–π—Å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏",
			input:          []string{"Apple", "apple", "Banana", "banana"},
			expectedOutput: "Apple, apple, Banana, banana",
		},
		{
			name:           "–°–ª–∞–π—Å —Å –æ–¥–Ω–∏–º–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏",
			input:          []string{"a", "b", "c"},
			expectedOutput: "a, b, c",
		},
		{
			name:           "–°–ª–∞–π—Å —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º",
			input:          []string{"unique"},
			expectedOutput: "unique",
		},
		{
			name:           "–°–ª–∞–π—Å —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π",
			input:          []string{""},
			expectedOutput: "",
		},
		{
			name:           "–°–ª–∞–π—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏",
			input:          []string{"", "", ""},
			expectedOutput: "",
		},
		{
			name:           "–°–ª–∞–π—Å —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω–æ–π",
			input:          []string{"a", "aa", "a", "aaa", "aa"},
			expectedOutput: "a, aa, aaa",
		},
		{
			name:           "–°–ª–∞–π—Å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫",
			input:          []string{"a b", "b a", "c", "c"},
			expectedOutput: "c, a b, b a",
		},
		{
			name:           "–°–ª–∞–π—Å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
			input:          []string{"hello!", "world@", "hello", "world"},
			expectedOutput: "hello, world, hello!, world@",
		},
		{
			name:           "–°–ª–∞–π—Å —Å —Ü–∏—Ñ—Ä–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö",
			input:          []string{"123", "1", "12", "123"},
			expectedOutput: "1, 12, 123",
		},
		//???
		//{
		//	name:           "–°–ª–∞–π—Å —Å —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
		//	input:          []string{"Go1", "Go2", "Go1", "Go3"},
		//	expectedOutput: "Go1, Go2, Go3",
		//},
	}

	for _, tt := range tests {
		tt := tt // –∑–∞—Ö–≤–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ü–∏–∫–ª–∞
		t.Run(tt.name, func(t *testing.T) {
			output := SortStrings(tt.input)
			if output != tt.expectedOutput {
				t.Errorf("SortStrings(%v) = %q; want %q", tt.input, output, tt.expectedOutput)
			}
		})
	}
}
